#!/usr/bin/perl

# docker-event-daemon
#
# Monitors for docker container and network events:
# - when it receives them, debounces;
# - safely updates the containers.json file to reflect changes in container state;
# - periodically calculates container sizes and interpolates the last-looked-up size figure into the current container state;
# - inspects containers to update port bindings.

use strict;

use JSON;

use Try::Tiny;
use File::Path;
use IO::Handle;
use IO::Select;
use IPC::Open2;
use Time::HiRes qw(time);
use URI::Escape;

use Util qw(cacheReadWrite flog call_socket_api run_system unique);
use Exception;
use Data qw($CONFIG);
use Reservation;
use Containers;
use User;

sub _update {
   my $oldJSON = shift;
   my $opts = shift; # hashref: { 'updateSizes' => undef|1 }

   my $path = '/containers/json?all=true' . (($CONFIG->{'docker'}{'sizes'} && $opts->{'updateSizes'}) ? '&size=true' : '');

   flog("docker-event-daemon::update: requesting container list" . ($opts->{'updateSizes'} ? ' with sizes' : ''));

   my $result = call_socket_api(
      $CONFIG->{'docker'}{'socket'},
      $path
   );

   unless($result) {
      die Exception->new( 'dbg' => "Unable to execute Docker API call: $path #1", 'msg' => "Unable to retrieve container list" );
   }

   if(!$result->is_success) {
      die Exception->new( 'msg' => sprintf("Unable to obtain container list via $path (response code %d, error '%s')", $result->code, $result->message) );
   }

   my $newContainersFromAPI;
   my $oldContainers;
   try {
      $oldContainers = $oldJSON ? decode_json($oldJSON)->{'containers'} : {};
      $newContainersFromAPI = decode_json($result->body);
   }
   catch {
      $oldContainers = {};
   };

   my $idePath = $CONFIG->{'ide'}{'path'};
   my $hostDataPath = $CONFIG->{'ssh'}{'path'};

   my $newContainers;
   foreach my $c (@$newContainersFromAPI) {

      my $ID = substr($c->{'Id'}, 0, 12);
      my ($ideVolume) = map { $_->{'Type'} eq 'volume' ? ['volume', $_->{'Name'}] : ['bind', $_->{'Source'}] } grep { $_->{'Destination'} eq $idePath } @{$c->{'Mounts'}};
      my ($hostDataVolume) = map { $_->{'Type'} eq 'volume' ? ['volume', $_->{'Name'}] : ['bind', $_->{'Source'}] } grep { $_->{'Destination'} eq $hostDataPath } @{$c->{'Mounts'}};

      $newContainers->{$ID}{'docker'} = {
         'ID' => $ID, # Short ID (for now)
         'Names' => substr($c->{'Names'}[0], 1), # Skip leading '/'
         'CreatedAt' => $c->{'Created'}, # Was string; now unixtime
         'Status' => $c->{'Status'}, # String
         'Image' => $c->{'Image'}, # String
         'ImageId' => substr( substr($c->{'ImageID'}, 7), 0, 12),
         'Size' => $c->{'SizeRw'},
         'Networks' => join(',', sort keys %{$c->{'NetworkSettings'}{'Networks'}})
      };

      # HashRef keyed on internal port looking up host port.
      # This is only needed when $CONFIG->{'gateway'}{'enabled'} is true (and this is deprecated)
      my $ports = { map { $_->{'PrivatePort'} => $_->{'PublicPort'} } @{$c->{'Ports'}} };

      $newContainers->{$ID}{'inspect'} = { 
         'Networks' => $c->{'NetworkSettings'}{'Networks'},
         'Ports' => $ports,
         'ideVolume' => $ideVolume,
         'hostDataVolume' => $hostDataVolume
      };

      # Copy the container Size from the oldContainer record if we haven't requested the Size on this run.
      if( $oldContainers && $oldContainers->{$ID} && $oldContainers->{$ID}{'docker'}{'Size'} ) {
         if( !$newContainers->{$ID}{'docker'}{'Size'} ) {
            $newContainers->{$ID}{'docker'}{'Size'} = $oldContainers->{$ID}{'docker'}{'Size'};
         }
      }

   }

   my $newContainersFile = { 'version' => Containers::CURRENT_VERSION, 'containers' => $newContainers };

   return encode_json($newContainersFile);
}

sub update {
   my $opts = shift;  # hashref: { 'updateSizes' => undef|1 }

   my $containersJSON = cacheReadWrite(
      $CONFIG->{'containersPath'},
      \&_update,
      $opts
   );

   try {
      my $containersFile = decode_json($containersJSON);
      my $containers = $containersFile->{'containers'};

      # Assign ExpiryTimes to Reservations missing containers, and clean up old Reservations.
      Reservation->load_clean_map(keys %$containers);
   }
   catch {
      flog("update: caught exception: " . (ref($_) ? $_->dbg : $_));
   };
}

my $SIGNAL_RECEIVED = 0;

$SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = sub {
   # This will interrupt can_read().
   flog("eventHandler: Received SIGTERM; preparing to exit.");
   $SIGNAL_RECEIVED = 1;
};

sub eventHandler {
   flog("eventHandler: Starting...");

   my $Events = IO::Handle->new();

   my $pid = open2($Events, undef, $CONFIG->{'docker'}{'bin'}, 'events', '--format', "{{ json . }}")
      || die Exception->new( 'msg' => "Unable to launch 'docker events'");

   flog("eventHandler: Launched 'docker event' subprocess with PID $pid");
   $Events->autoflush(1);
   $Events->blocking(0);

   my $s = IO::Select->new();
   $s->add($Events);

   my $lastSizesUpdateTime = 0;
   my $lastEventTime = 0;
   my $timeout;
   my $Container; # hashref { <containerID> => <count of events received> }

   try {
      OUTER:
      while(!$SIGNAL_RECEIVED) {

         if(scalar(keys %$Container)) {
            flog("eventHandler: Updating docker containers without sizes");
            update( { } );
         }

         # Updating with sizes can be slow, so only do this if:
         # - it's been more than 5s since the last event; and
         # - it's been more than 55s since the last time sizes were updated.
         if(time - $lastEventTime >= 5 && time - $lastSizesUpdateTime >= 55) {
            $lastSizesUpdateTime = time;
            $lastEventTime = 0;
            flog("eventHandler: Updating docker containers with sizes");
            update( { 'updateSizes' => 1 } );
         }

         $Container = {};
         $timeout = 30;
         while(1) {
            flog("eventHandler: Waiting ${timeout}s for events ...");
            last unless $s->can_read( $timeout );

            flog(sprintf("eventHandler: Received event: error=%d; EOF=%d", $Events->error, $Events->eof));

            last OUTER if $Events->eof || $Events->error;

            my $events = 0;
            while(my $eventJSON = $Events->getline()) {

               my $event;
               try {
                  $event = decode_json($eventJSON);
               }
               catch {
                  flog("eventHandler: failed to parse event JSON '$eventJSON'");
                  next;
               };

               flog(sprintf("eventHandler($events): Received event: Type=%s, Action=%s, Actor=%s", $event->{'Type'}, $event->{'Action'}, $event->{'Actor'}{'ID'}));

               if( $event->{'Type'} eq 'container' && $event->{'Action'} =~ /^(start|stop|create|destroy)$/ ) {
                  $Container->{ $event->{'Actor'}{'ID'} }++;
               }
               elsif( $event->{'Type'} eq 'network' && $event->{'Action'} =~ /^(connect|disconnect)$/ ) {
                  $Container->{ $event->{'Actor'}{'Attributes'}{'container'} }++;
               }

               if( $event->{'Type'} eq 'container' && $event->{'Action'} =~ /^(start)$/ ) {

                  if( $Container->{ $event->{'Actor'}{'ID'} } ) {
                     # This container's details might not yet have been loaded. Do this now.
                     flog("eventHandler: Updating docker containers without sizes before reloading reservations");
                     update( { } );
                  }

                  # Reload config, reservations and containers, to access Reservation->load and %CONFIG.
                  # Reload users and roles too, in case we can update owner's name and email [at later date].
                  Data::load('config.json', 'users.json', 'roles.json', 'reservations.json', 'containers.json');

                  my $reservations = Reservation->load({ 'containerId' => $event->{'Actor'}{'ID'} });
                  if(!@$reservations) {
                     flog("eventHandler: we don't manage containerId=$event->{'Actor'}{'ID'}");
                     next;
                  }

                  my $reservation = $reservations->[0];
                  my $reservationId = $reservation->id;
                  my $containerId = $reservation->containerId;

                  flog("eventHandler: we manage reservationId=$reservationId with containerId=$containerId");

                  try {
                     $reservation->exec();
                  }
                  catch {
                     my ($msg, $dbg) = ref($_) ? ($_->msg(), $_->dbg()) : ($_,$_);
                     flog("eventHandler: failed to launch IDE for reservationId=$reservationId with containerId=$containerId: dbg='$dbg'; msg='$msg'");
                  };
               }
            }
            continue {
               $events++;
               $lastEventTime = time;

               # In testing, a select timeout of 0.25 seconds delivered a happy medium between responsiveness
               # and over-reacting to docker container and network events.
               $timeout = 0.25;
            }

            flog("eventHandler: Finished reading.");
         }
      }
   }
   catch {
      flog("eventHandler: caught exception: " . (ref($_) ? $_->dbg : $_));
      sleep 1;
   };

   flog("eventHandler: Ending...");

   close $Events;
   flog(sprintf("eventHandler: Sending signal TERM=%d to 'docker events' subprocess PID $pid", kill(15, $pid)));
   sleep 1;
   if( waitpid( $pid, 0 ) == $pid ) {
      flog("eventHandler: Reaped 'docker events' subprocess PID $pid");
   }
   else {
      flog(sprintf("eventHandler: Sending signal KILL=%d to 'docker events' subprocess PID $pid", kill(9, $pid)));
   }

   flog("eventHandler: Ended.");
}

####################################################################################################

flog({ 'service' => 'docker-event-daemon', 'file' => "/var/log/$ENV{'USER'}/$ENV{'USER'}.log" });
flog("docker-event-daemon: Starting...");

Data::load('config.json');

# Create temporary path needed for cache and log files.
if( ! -d $CONFIG->{'tmpPath'} ) {
   mkpath( [ $CONFIG->{'tmpPath'} ], 0, 0755 );
}

while(1) {
   eventHandler();

   last if $SIGNAL_RECEIVED;
   sleep 1;
}
flog("docker-event-daemon: Exiting.");

1;